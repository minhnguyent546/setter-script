#!/usr/bin/env bash

# judging a solution locally
#
# requires:
#   time (not a built-in keyword one)
#   timeout
#

declare -r __script_name='setter judge'

source "${_SETTER_DIR}/env/colors.sh"
source "${_SETTER_DIR}/utils/util.sh"

input_dir="in"
output_dir="out"
time_limit="1s"
memory_limit="256MB"
time_command="$(which time 2> /dev/null)" # do not use time shell keyword

if [[ -z "$time_command" ]]; then
  missing_cmd "time"
fi

if ! cmd_exists "timeout"; then
  missing_cmd "timeout"
fi

usage() {
  cat << EOF
Usage: ${__script_name} [options...] <solution>

Options:
  -i, --input-dir <dir>     Directory that contains input files (default: ${input_dir})
  -o, --output-dir <dir>    Directory that contains output files (default: ${output_dir})
  -t, --time <second>       Set time limit (default: ${time_limit})
  -m, --memory <memory>     Set memory limit (default: ${memory_limit})
  -h, --help                Show this help message
EOF
}

options='i:o:t:m:h'
long_options='input:,output:,time:,memory:,help'

OPTS=$(getopt --name "$__script_name" --options "$options" \
       --longoptions "$long_options" -- "$@")

if (( $? != 0 )); then
  show_try_help
  exit 2
fi
eval set -- "$OPTS"

while true; do
  case "$1" in
    -i | --input-dir)
      input_dir="$2"; shift 2 ;;
    -o | --output-dir)
      output_dir="$2"; shift 2 ;;
    -t | --time)
      time_limit="${2%s}s"; shift 2 ;;
    -m | --memory)
      memory_limit="$2"; shift 2 ;;
    -h | --help)
      usage; exit 0;;
    --)
      shift; break ;;
    *)
      ecerr "unknown option: $1"; shift ;;
  esac
done

if (( $# < 1 )); then
  usage
  exit 1
fi

solution="$1"
ext_file="${solution##*.}"
case "$ext_file" in
  cpp | c\+\+)
    ecerr "not implemented: cannot handle ${ext_file} file"
    exit 1
    ;;
  out)
    if [[ ! -x "$solution" ]]; then
      ecerr "'%s' is not executable" "$solution"
      exit 1
    fi
    ;;
  *)
    ecerr "solution must be a executable or cpp file"
    exit 1
    ;;
esac

if [[ "$(basename "$solution")" == "$solution" ]]; then
  solution="./${solution}"
fi

if [[ ! -d "$input_dir" ]]; then
  ecerr "could not find input directory: %s" "$input_dir"
  exit 2
fi

if [[ ! -d "$output_dir" ]]; then
  ecerr "could not find output directory: %s" "$output_dir"
  exit 2
fi

num_inp_files=$(find "$input_dir" -iname "*.in" | wc -l)

if (( num_inp_files == 0 )); then
  ecerr "no input file found in '%s'" "$input_dir"
  exit 2
fi

input_cnt=1
total_ac=0
output_temp_file="$(mktemp)"
resources_format="%e;%M"
resources_file="$(mktemp)"

trap 'rm "$resources_file" "$output_temp_file"' EXIT

exit_code=0
total_exec_time=0
max_exec_time=
max_memory=

for input in "${input_dir}"/*.in; do
  input_basename=$(basename "$input" .in)
  ans="${output_dir}/${input_basename}.out"
  echo -en " (${LIGHT_GREEN}${input_cnt}${RESET}/${MAGENTA}${num_inp_files}${RESET}) ${input}"
  if [[ ! -f "$ans" ]]; then
    echo -e "\t${B_RED}SKIPPED${RESET} (${B_BLUE}${ans}${RESET} not found)"
    exit_code=1
    continue
  fi

  timeout "$time_limit" "$time_command" -f "$resources_format" -o "$resources_file" \
      "$solution" < "$input" > "$output_temp_file"
  exec_exit_code=$?
  if (( exec_exit_code != 0 )); then
    if (( exec_exit_code == 124 )); then 
      # command times out 
      echo -e "\t${B_RED}TLE${RESET} (> $time_limit)"
    else
      # assume exit code is returned by `solution`
      echo -e "\t${B_RED}RUN TIME${RESET} (exit_code=$exec_exit_code)"
    fi
    exit_code=1
  elif ! diff -Zb "$output_temp_file" "$ans" &> /dev/null; then
    # wrong answer
    echo -e "\t${B_RED}WA${RESET}"
    exit_code=1
  else
    elapsed_time="$(awk -F';' '{print $1}' "$resources_file")"
    memory_usage="$(awk -F';' '{print $2}' "$resources_file")"
    (( memory_usage *= 1000 ))

    if [[ -z "$max_exec_time" ]] || (( $(echo "$max_exec_time < $elapsed_time" | bc -l) )); then
      max_exec_time="$elapsed_time"
    fi
    if [[ -z "$max_memory" ]] || (( $(echo "$max_memory < $memory_usage" | bc -l) )); then
      max_memory="$memory_usage"
    fi

    memory_usage="$(echo "$memory_usage" | numfmt --to=si --format="%0.1f" --suffix=B)"
    total_exec_time=$( echo "$total_exec_time + $elapsed_time" | bc -l )
    echo -e "\t${B_GREEN}OK${RESET} (${elapsed_time}s, ${memory_usage})"
    (( total_ac += 1 ))
  fi
  (( input_cnt += 1 ))
done

max_memory="$(echo "$max_memory" | numfmt --to=si --format="%0.1f" --suffix=B)"
echo "Finished in  : ${total_exec_time}s"
echo "Total AC     : ${total_ac}/${num_inp_files}"
echo "Max run time : ${max_exec_time}s"
echo "Max memory   : $max_memory"
exit $exit_code
